@testSetup

//get standart PriceBook Id
Id pricebookId = Test.getStandardPricebookId();


//test VFP
Test.setCurrentPage(Page.Tasks_and_Expenses);
ApexPages.currentPage().getParameters().put('id', projectPhase.project_cloud__Project__c);


System.assertEquals();
 Test.startTest();
 Test.stopTest();


Database.SaveResult result = Database.insert(records or record, false);
System.assert(result.isSuccess());


@isTest
private class TemperatureConverterTest {
    @isTest static void testWarmTemp() {
        Decimal celsius = TemperatureConverter.FahrenheitToCelsius(70);
        System.assertEquals(21.11,celsius);
    }
    
    @isTest static void testFreezingPoint() {
        Decimal celsius = TemperatureConverter.FahrenheitToCelsius(32);
        System.assertEquals(0,celsius);
    }
    @isTest static void testBoilingPoint() {
        Decimal celsius = TemperatureConverter.FahrenheitToCelsius(212);        
        System.assertEquals(100,celsius,'Boiling point temperature is not expected.');
    } 
    
    @isTest static void testNegativeTemp() {
        Decimal celsius = TemperatureConverter.FahrenheitToCelsius(-10);
        System.assertEquals(-23.33,celsius);
    }
      
}


@isTest
private class UpdateContactAddressesTest {
    @testSetup 
    static void setup() {
        List<Account> accounts = new List<Account>();
        List<Contact> contacts = new List<Contact>();
        // insert 10 accounts
        for (Integer i=0;i<10;i++) {
            accounts.add(new Account(name='Account '+i, 
                billingcity='New York', billingcountry='USA'));
        }
        insert accounts;
        // find the account just inserted. add contact for each
        for (Account account : [select id from account]) {
            contacts.add(new Contact(firstname='first', 
                lastname='last', accountId=account.id));
        }
        insert contacts;
    }
    static testmethod void test() {        
        Test.startTest();
        UpdateContactAddresses uca = new UpdateContactAddresses();
        Id batchId = Database.executeBatch(uca);
        Test.stopTest();
        // after the testing stops, assert records were updated properly
        System.assertEquals(10, [select count() from contact where MailingCity = 'New York']);
    }
    
}

*****************
Get parameters from url VFP

PageReference pageRef = Page.CloneDraftPitches; //CloneDraftPitches - VF page
Test.setCurrentPage(pageRef);
// put the lead id as a parameter
ApexPages.currentPage().getParameters().put('id',l.id);


****************
//insert queue
 Group g1 = new Group(Name='group name', type='Queue');
insert g1;
QueuesObject q1 = new QueueSObject(QueueID = g1.id, SobjectType = 'Lead');
insert q1;

****************
//create the Custom Settings
ServiceTokens__c servToken = new ServiceTokens__c();
servToken.Name = 'ProjectServiceToken';
servToken.Token__c = 'shgglskgblsbglbdsflgbldmfbgldb';
insert servToken;

*****************
//test when standart controller and extensions
Product2 pr = new Product2();
ApexPages.StandardController sc = new ApexPages.StandardController(pr);
Product2Extension ext = new Product2Extension(sc);
