https://developer.salesforce.com/docs/component-library/bundle/lightning:input/example#lightningcomponentdemo:exampleInputEmail
https://developer.salesforce.com/docs/component-library/bundle/lightning:tab/example

//щоб компоненту можна було додати до App Builder, Tabs і так далі...
https://developer.salesforce.com/docs/atlas.en-us.214.0.lightning.meta/lightning/components_config_for_app_builder.htm

//implements to componen
implements="force:appHostable" - Tabs
implements="force:lightningQuickAction" - Quick action 
implements="forceCommunity:availableForAllPageTypes" access="global" -Comunity
implements="lightning:actionOverride" - override the standard action
implements="flexipage:availableForRecordHome" - make the component available for record pages.
implements="flexipage:availableForAllPageTypes" - Lightning App Builder 


DESIGN - щоб додати адекватну назви компоненти і можливість редагувати атрибути з Lightning App Builder, Community Builder, or Flow Builder
https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/components_config_for_app_builder_design_files.htm



******* додаємо до VFP *********
//VFP
<apex:includeLightning />
<div id="lightning-wrap" />

<script>
$Lightning.use("c:TrainingDivisionBookingFormApp", function() {
$Lightning.createComponent("c:TrainingDivisionBookingForm",
{opportunityId : '{!opportunity.Id}'},
"lightning-wrap",
function(cmp) {
    console.log("button was created");
});
});
</script>
//Lightning app (TrainingDivisionBookingFormApp)
<aura:application access="GLOBAL" extends="ltng:outApp" implements="ltng:allowGuestAccess">
    <aura:dependency resource="c:TrainingDivisionBookingForm"/>
</aura:application>
    
    

deleting records 
https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/apex_records_delete.htm

auraErrorHandling
https://developer.salesforce.com/blogs/2017/09/error-handling-best-practices-lightning-apex.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+SforceBlog+%28Salesforce+Developers+Blog%29

Application events
https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/events_application_create.htm

Component events
https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/events_component_create.htm

//стилі для компонентів
extends="force:slds"
https://lightningdesignsystem.com

//Sort records in userSide
https://salesforce.stackexchange.com/questions/149779/lightning-client-side-sorting

//delete, create, update record without APEX
https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/data_service.htm




****************************************************************
Component
****************************************************************

//handler на зміну значення атрибута boat
<aura:handler name="change" value="{!v.boat}" action="{!c.itemsChange}"/>
<aura:attibute name="boat" type="string"/>

https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/js_renderers.htm
<aura:handler name="render" value="{!this}" action="{!c.itemsChange}"/>
<aura:handler name="afterRender" value="{!this}" action="{!c.itemsChange}"/>




//завантаження скрипна і стилів зі статік ресурсі в компоненту
<ltng:require styles="/resource/fivestar/rating.css" 
                  scripts='/resource/fivestar/rating.js' 
                  afterScriptsLoaded="{!c.controllerFunction}"/>
https://developer.salesforce.com/blogs/developer-relations/2015/05/loading-external-js-css-libraries-lightning-components.html		  




//компонента в якій можна змінювати дані рекорда на якому ми є
https://trailhead.salesforce.com/content/learn/modules/lightning_data_service/lightning_data_service_manipulate_records
<force:recordData aura:id="recordEditor"
                      layoutType="FULL"
                      recordId="{!v.recordId}"
                      targetError="{!v.recordError}"
                      targetRecord="{!v.record}"
                      targetFields ="{!v.simpleRecord}"
                      mode="EDIT"/>

//spiner
<lightning:spinner aura:id="spinner" variant="brand" size="large" class="slds-hide"/>
$A.util.addClass(component.find('spinner'), 'slds-hide');



// тег а без href
href="javascript:void(0);"




****************************************************************
Controller
****************************************************************
$A.util.addClass(component.find('spinner'), 'slds-hide');
$A.util.removeClass(), $A.util.toggleClass()

var isDefined = !$A.util.isUndefined(cmp.get("v.label"));
var isEmpty = $A.util.isEmpty(cmp.get("v.label"));


//get value of clicked element
click : function(component, event, helper) {
	var clickedElement = event.target.innerText;

	var btnClicked = event.getSource();

	var btnLabel = btnClicked.get("v.label");
	var btnAuraId = btnClicked.getLocalId();

	//set new value of button attributes
	btnClicked.set('v.label','New Label');
	
	var name = component.find("name").get("v.value"); //aura:id="name"
	component.find("element").set("v.value", "");
}

//get element by aura:id - подібне до document.getElementById
component.find('ratingarea').getElement();


//get data-value of clicked element
<div onclick="{!c.myFunction}" data-myvalue="this is it">click me</div>

myFunction : function (component, event, helper) {
    var component_target = event.currentTarget;
    var attribute = component_target.dataset.myvalue;
    
    aбо
    var userId = event.currentTarget.getAttribute("data-userid");
}


//fields validations
const valid = component.find('tournamentField').reduce((validFields, current) => {
	current.showHelpMessageIfInvalid();
	return validFields && current.get('v.validity').valid;
}, true);


//Call Apex Controller
const action = component.get('c.crateCase');
action.setParams({
  caseRecord : caseRecord
})
action.setCallback(this, (response)=> {
  const state = response.getState();
  if (component.isValid() &&  state === 'SUCCESS') {
    component.set('v.att-name', response.getReturnValue());
  } else {
  }
})
action.setStorable();
$A.enqueueAction(action);



-*-*-*-*-*-*-*-* events *-*-*-*-*-*-*-*
https://developer.salesforce.com/docs/component-library/bundle/force:closeQuickAction/documentation

$A.get('e.c:rerenderEvent').fire();
//close action modal
$A.get("e.force:closeQuickAction").fire(); 
//hide by css
<aura:html tag="style">
        .slds-backdrop {
    		background: rgba(43, 40, 38, 0) !important;  
    	}
    	.forceModal {
    		display:none !important;
   		}
		body{
			overflow: visible!important;
		} 
	</aura:html>


//refresh page
$A.get('e.force:refreshView').fire();

component.getEvent('createNewTourn').fire();

//navigate to record page by it Id
var navEvt = $A.get("e.force:navigateToSObject");
    navEvt.setParams({
      "recordId": "00QB0000000ybNX",
      "slideDevName": "related"
    });
    navEvt.fire();
}

//navigate to object home page
var homeEvent = $A.get("e.force:navigateToObjectHome");
homeEvent.setParams({
	"scope": "Speaker__c"
});
homeEvent.fire();

//navigate to url
conset url = '/some-url';
const navigateEvt = $A.get('e.force:navigateToURL');
navigateEvt.setParams({
    url: url
});
navigateEvt.fire();

//toast (messaging)
https://developer.salesforce.com/docs/component-library/bundle/force:showToast/documentation
https://developer.salesforce.com/blogs/developer-relations/2017/08/displaying-user-notifications-lightning-component-framework.html
https://www.lightningdesignsystem.com/guidelines/messaging/components/toasts/#flavor-usage

var toastEvent = $A.get("e.force:showToast");
toastEvent.setParams({
	mode: 'sticky',
	message: 'This is a required message',
	messageTemplate: 'Record {0} created! See it {1}!',
	messageTemplateData: ['Salesforce', {
	    url: 'http://www.salesforce.com/',
	    label: 'here',
	    }
	]
});
toastEvent.fire();




****Exeptions****
*****************
try{
} catch (DmlException e) {
    throw new AuraHandledException(e.getDmlMessage(0));
}
try{
} catch (Exception e) {
    throw new AuraHandledException(e.getMessage());
}
if (state === "ERROR"){
	response.getError().forEach((error)=>{
	    this.showToast('Error!', error.message, 'error');
	})
}

//aura handled exception
catch(AuraHandledException e){
    updated = false;
}

***** Community ******
**********************
implements="forceCommunity:themeLayout" - Community Builder
implements="forceCommunity:searchInterface" - Community
implements="forceCommunity:availableForAllPageTypes" - Community component (нова компонента доступна в community)
extends="forceCommunity:navigationMenuBase"

<aura:attribute name="sidebarFooter" type="Aura.Component[]"/>
<aura:attribute name="navBar" type="Aura.Component[]"/>
<aura:attribute name="search" type="Aura.Component[]"/>

{!v.sidebarFooter}
{!v.navBar}
{!v.search}
{!v.body}

***** force:recordData ******
*****************************
<aura:attribute name="record" type="Object" description="The record object to be displayed"/>
<aura:attribute name="orderRecord" type="Object" description="A simplified view record object to be displayed"/>
	
    <force:recordData aura:id="record"
        recordId="{!v.recordId}"
        targetError="{!v.recordError}"
        targetRecord="{!v.record}"
        targetFields ="{!v.orderRecord}"
        fields="Id, Status, Purchase_or_License1__c"
        recordUpdated="{!c.doInit}" />

//controller
doInit : function(component, event, helper) {
	var order = component.get('v.orderRecord');
}


****************************************************************
Style Css
****************************************************************

@media only screen and (max-width: 1023px) {
    .THIS .warning-wrap{
        font-size: 22px;
    }
}

/* some comments */



****************************************************************
APEX
****************************************************************
//get picklist values
List<Map<String, String>> courseTypeValuesList = new List<Map<String, String>>();
Schema.DescribeFieldResult fieldResult = Schema.Opportunity.Course_Type__c.getDescribe();
List<Schema.PicklistEntry> ple = fieldResult.getPicklistValues();
for( Schema.PicklistEntry pickListVal : ple){
	courseTypeValuesList.add(new Map<String, String>{'value' => pickListVal.getValue(), 'label' => pickListVal.getLabel() });
}
