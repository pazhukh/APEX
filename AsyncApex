//**//**Scheduable**//**//
@isTest
public class DailyLeadProcessorTest {
	public static String CRON_EXP = '2 47 16 13 7 ? 2018';//коли ми запустим код
    
    static testMethod void testScheduledJob(){
        List<Lead> newLeads = new List<Lead>();
        for(Integer i = 1; i <= 200; i++){
           Lead newLead = new Lead(LastName='Lead' + i, 
                                   Company='Company' + i, 
                                  Status='Open - Not Contracted');
            newLeads.add(newLead);
        }
        insert newLeads;
        
        String jobId = System.schedule('ScheduledApexTest',
            CRON_EXP, 
            new DailyLeadProcessor());//створює екземпляр класа через певний час, який вставили в 
            //public static String CRON_EXP
    }
}

//метод який запуститься в майбутньому
global class DailyLeadProcessor implements Schedulable{
	global void execute(SchedulableContext ctx) {
    	List<Lead> first200Lead = [SELECT Name FROM Lead WHERE LeadSource=null LIMIT 200];
        for(Lead oneLead : first200Lead){
            oneLead.LeadSource = 'Dreamforce';
        }
        update first200Lead;
    }
}

*****///****Batchable******///****
**********************************

global class TransactionGatherer_Batch implements Database.Batchable<sObject>, Database.Stateful {
  
  //кверяємо рекорди з якими будемо працювати в EXECUTE
  global Database.QueryLocator start(Database.BatchableContext BC) {
        return Database.getQueryLocator(
            [SELECT Id FROM Plan_Usage__c]
        );
  }
  
   //тіло батчу-робимо все що потрібно з рекордами які кверьнули в START
   global void execute(Database.BatchableContext BC, List<sObject> scope) {
   }
   
   //фініш батчу
   global void finish(Database.BatchableContext BC) {
        //System.debug(JSON.serialize(createdTransactions)); 
   }
}

//щоб запустити батч
Id batchId = Database.executeBatch(new TransactionGatherer_Batch(), 10);



****///***Queueable***//***
***************************
public class UpdateParentAccount implements Queueable {
    
    private List<Account> accounts;
    private ID parent;
    
    public UpdateParentAccount(List<Account> records, ID id) {
        this.accounts = records;
        this.parent = id;
    }
    public void execute(QueueableContext context) {
        for (Account account : accounts) {
          account.parentId = parent;
          // perform other processing or callout
        }
        update accounts;
    }
    
}
