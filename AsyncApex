

//**//**Scheduable**//**//
@isTest
public class DailyLeadProcessorTest {
	public static String CRON_EXP = '2 47 16 13 7 ? 2018';//коли ми запустим код
    
    static testMethod void testScheduledJob(){
        List<Lead> newLeads = new List<Lead>();
        for(Integer i = 1; i <= 200; i++){
           Lead newLead = new Lead(LastName='Lead' + i, 
                                   Company='Company' + i, 
                                  Status='Open - Not Contracted');
            newLeads.add(newLead);
        }
        insert newLeads;
        
        String jobId = System.schedule('ScheduledApexTest',
            CRON_EXP, 
            new DailyLeadProcessor());//створює екземпляр класа через певний час, який вставили в 
            //public static String CRON_EXP
    }
    or just execute
    
    ContactActivity_Schedule cs = new ContactActivity_Schedule();
    cs.execute(null);
    
}

//метод який запуститься в майбутньому
global class DailyLeadProcessor implements Schedulable{
	global void execute(SchedulableContext ctx) {
    	List<Lead> first200Lead = [SELECT Name FROM Lead WHERE LeadSource=null LIMIT 200];
        for(Lead oneLead : first200Lead){
            oneLead.LeadSource = 'Dreamforce';
        }
        update first200Lead;
    }
}

/*/*/*/*/
public class WarehouseSyncSchedule implements Schedulable{
    public void execute(SchedulableContext ctx){
    	//метод який має виконтуватися в скедюеблі
        WarehouseCalloutService.runWarehouseEquipmentSync();
    }
}

//запускаємо скедюебл через девконсоль або Apex Classes-Schedule Apex
WarehouseSyncSchedule newSchdule = new WarehouseSyncSchedule();
String launchTime = '0 0 08 * * ?'; //every day at 8 am
System.schedule('some name', launchTime, newSchdule);

//запускаємо через 2 хв
String hour = String.valueOf(Datetime.now().hour());
String min = String.valueOf(Datetime.now().minute() + 2); 
String ss = String.valueOf(Datetime.now().second());
String nextFireTime = ss + ' ' + min + ' ' + hour + ' * * ?';
System.schedule('My Job Started At ' + String.valueOf(Datetime.now()), nextFireTime, new ContactActivity_Schedule());

/*/*/*/*/

*****///****Batchable******///****
**********************************

global class TransactionGatherer_Batch implements Database.Batchable<sObject>, Database.Stateful {
  
  //кверяємо рекорди з якими будемо працювати в EXECUTE
  global Database.QueryLocator start(Database.BatchableContext BC) {
        return Database.getQueryLocator(
            [SELECT Id FROM Plan_Usage__c]
        );
  }
  
   //тіло батчу-робимо все що потрібно з рекордами які кверьнули в START
   global void execute(Database.BatchableContext BC, List<sObject> scope) {
   }
   
   //фініш батчу
   global void finish(Database.BatchableContext BC) {
        //System.debug(JSON.serialize(createdTransactions)); 
   }
}

//щоб запустити батч
Id batchId = Database.executeBatch(new TransactionGatherer_Batch(), 10);



****///***Queueable***//***
***************************
public class UpdateParentAccount implements Queueable {
    
    private List<Account> accounts;
    private ID parent;
    
    public UpdateParentAccount(List<Account> records, ID id) {
        this.accounts = records;
        this.parent = id;
    }
    public void execute(QueueableContext context) {
        for (Account account : accounts) {
          account.parentId = parent;
          // perform other processing or callout
        }
        update accounts;
    }
    
}

*****///****Batchable and Schedulable******///****
**********************************
global class TaskCreation_Schedular_Batch implements Database.batchable<Contract>, Schedulable, Database.Stateful {
    
    global List<Contract> start(Database.BatchableContext info) {
        List<Contract> contracts = [
            SELECT
                Id, Status, OwnerId
            FROM
                Contract
            WHERE
                Status = 'Awaiting Signed Contract'
        ];

    return contracts;
    }
    
    global void execute(Database.BatchableContext info, List<Contract> scope) {
        List<Task> tasks = new List<Task>();
        for (Contract contract : scope) {
            tasks.add(new Task(Subject = 'Other', OwnerId = contract.OwnerId, Status = 'Open'));
        }
        System.debug(tasks.size());
        insert tasks;
    }
    
    global void finish(Database.BatchableContext info) {
        System.debug('TaskCreation_Schedular_Batch is finished.');
    }
    
    
    global void execute(SchedulableContext sc) {
        TaskCreation_Schedular_Batch batch = new TaskCreation_Schedular_Batch();
        Database.executeBatch(batch, 10);
    }
}

\\Запустити
TaskCreation_Schedular_Batch TaskCreatBatch = new TaskCreation_Schedular_Batch();
String sch='0 5 2 * * ?';
//System.schedule(String jobName, String cronExp, APEX_OBJECT schedulable);
System.schedule('Batch Schedule', sch , TaskCreatBatch);

//Id batchjobId = Database.executeBatch(new TaskCreation_Schedular_Batch());
