//**//**Scheduable**//**//
@isTest
public class DailyLeadProcessorTest {
	public static String CRON_EXP = '2 47 16 13 7 ? 2018';//коли ми запустим код
    
    static testMethod void testScheduledJob(){
        List<Lead> newLeads = new List<Lead>();
        for(Integer i = 1; i <= 200; i++){
           Lead newLead = new Lead(LastName='Lead' + i, 
                                   Company='Company' + i, 
                                  Status='Open - Not Contracted');
            newLeads.add(newLead);
        }
        insert newLeads;
        
        String jobId = System.schedule('ScheduledApexTest',
            CRON_EXP, 
            new DailyLeadProcessor());//створює екземпляр класа через певний час, який вставили в 
            //public static String CRON_EXP
    }
}

//метод який запуститься в майбутньому
global class DailyLeadProcessor implements Schedulable{
	global void execute(SchedulableContext ctx) {
    	List<Lead> first200Lead = [SELECT Name FROM Lead WHERE LeadSource=null LIMIT 200];
        for(Lead oneLead : first200Lead){
            oneLead.LeadSource = 'Dreamforce';
        }
        update first200Lead;
    }
}

*****///****Batchable******///****
**********************************
global class UpdateContactAddresses implements 
    Database.Batchable<sObject>, Database.Stateful {
    
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Database.QueryLocator start(Database.BatchableContext bc) {
        return Database.getQueryLocator(
            'SELECT ID, BillingStreet, BillingCity, BillingState, ' +
            'BillingPostalCode, (SELECT ID, MailingStreet, MailingCity, ' +
            'MailingState, MailingPostalCode FROM Contacts) FROM Account ' + 
            'Where BillingCountry = \'USA\''
        );
    }
    global void execute(Database.BatchableContext bc, List<Account> scope){
        // process each batch of records
        List<Contact> contacts = new List<Contact>();
        for (Account account : scope) {
            for (Contact contact : account.contacts) {
                contact.MailingStreet = account.BillingStreet;
                contact.MailingCity = account.BillingCity;
                contact.MailingState = account.BillingState;
                contact.MailingPostalCode = account.BillingPostalCode;
                // add contact to list to be updated
                contacts.add(contact);
                // increment the instance member counter
                recordsProcessed = recordsProcessed + 1;
            }
        }
        update contacts;
    }    
    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' records processed. Shazam!');
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors, 
            JobItemsProcessed,
            TotalJobItems, CreatedBy.Email
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];
        // call some utility to send email
        EmailUtils.sendMessage(a, recordsProcessed);
    }    
}
