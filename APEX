Good tips
1. Use DataFactory.cls to create Data for UT in one Place.
2. Check dependency https://movinga--staging.my.salesforce.com/packaging/dependencyPage.apexp?id=00X24000000h6oZ

//сканер на проблеми
https://security.secure.force.com/security/tools/forcecom/scanner#

Все про apex
https://developer.salesforce.com/page/Apex_Intro
https://www.tutorialspoint.com/apex/apex_data_types.htm
Sertifications
https://quizlet.com/116767571/salesforce-app-builder-certification-flash-cards/

//залогінитися за домопогою session Id
String session = UserInfo.getSessionId();
System.debug(session.substring(0, 2));
System.debug(session.substring(2, session.length()));
https://org-url/secur/frontdoor.jsp?sid=(UserInfo.getSessionId())
https://tige--dev1601.lightning.force.com/secur/frontdoor.jsp?sid=00DW0000008q3zf!AQkAQDSO3OIpM3DChULLiG00CMNEa70iGUE3Z1NH5ZKJqFyPQBvX5lOg0oymU09MhhEtcY8PR5rxjgvvwDajbJ2uB8FkbQkv

//витягнути філди з філдсету обєкту
private static final List<Schema.FieldSetMember> ACCOUNT_FIELD_SET_FIELDS = ObjectType.Account.FieldSets.Time_Invoice_Item.getFields();


//get record type id
Id recTypeId = Schema.SObjectType.Opportunity.getRecordTypeInfosByDeveloperName().get('RB_Robotics_Process_RT').getRecordTypeId();
Id recTypeId = Schema.SObjectType.Account.getRecordTypeInfosByName().get('RB Robotics Process RT').getRecordTypeId();
System.debug(recTypeId);


//Attachments - завантажені документи
https://trailhead.salesforce.com/content/learn/projects/salesforce_developer_workshop/creating_lc_with_apex_controller
attachments are stored as ContentDocuments
public static void updatePicturePath(String recId){
        //In Lightning Experience, Attachments are stored in ContentDocuments
        ContentDocumentLink docLink = [SELECT ContentDocumentId FROM ContentDocumentLink WHERE LinkedEntityId = :recId order by Id desc Limit 1];
        //ContentVersion Id uniquely identifies the attachment
		ContentVersion ver = [SELECT Id FROM ContentVersion Where ContentDocumentId = :docLink.ContentDocumentId];
        //Update the Picture_Path field with the url of the image
        Speaker__c speaker = [SELECT Id FROM Speaker__c WHERE Id = :recId];
        speaker.Picture_Path__c = '/sfc/servlet.shepherd/version/download/'+ ver.Id;
        upsert speaker;
}

//create document
Document doc = new Document();
doc.FolderId = UserInfo.getUserId();
doc.Body = EncodingUtil.base64Decode(image);
doc.Type = type;
doc.IsPublic = true;
doc.ContentType = mimetype;
doc.Name = productName + ' - Image' + (documentIndex + 1);
insert doc;

//create content document
ContentVersion contentVersion = new ContentVersion(
	Title = 'IOS-Pass',
	PathOnClient = 'IOS-Pass.pkpass',
	VersionData = resourceBlob,
	IsMajorVersion = false
);
insert contentVersion;
ContentVersion cv = [
		SELECT
			ContentDocumentId
		FROM
			ContentVersion
		WHERE
			Id = :contentVersion.Id
];
ContentDocumentLink cdl = new ContentDocumentLink(
		LinkedEntityId = memberId,
		ContentDocumentId = cv.ContentDocumentId,
		Visibility = 'AllUsers',
		ShareType = 'V'
);
insert cdl;

//create attachment
Attachment attachment = new Attachment();
attachment.Body = resourceBlob;
attachment.Name = 'IOS-Pass-Attach.pkpass';
attachment.ParentId = memberId;
insert attachment;
    
    
    
    
    
    
    
    
//apex show massage in Visual Force
https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_pages_message.htm
ApexPages.addMessage();
ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.WARNING,'Some Text'));
ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, e.getMessage()));
<apex:pageMessages />

//селект стрінгою
Database.query('SELECT Name FROW Account');


//fill map by keys(quoteLineItem Payment Type) and values (Schedule__c records)
        Map<String, List<Schedule__c>> scheduleRecordsMap = new Map<String, List<Schedule__c>>();
        for(Schedule__c scheduleRelatedRecord : scheduleRelatedRecords) {
            if(scheduleRecordsMap.containsKey(scheduleRelatedRecord.Option_Item__r.Payment_Type__c)){
                scheduleRecordsMap.get(scheduleRelatedRecord.Option_Item__r.Payment_Type__c).add(scheduleRelatedRecord);
            } else {
                scheduleRecordsMap.put(scheduleRelatedRecord.Option_Item__r.Payment_Type__c, new List<Schedule__c>{scheduleRelatedRecord});
            }
        }



//recursive method to check if response returning object under path //'Linkage'=>'ParentOrganization'=>'OrganizationPrimaryName'
public static Object getHierarchyLastItem(List<String> keys, Map<String, Object> targetMap, Integer currentIndex) {
  if (currentIndex == keys.size()-1 || targetMap == null || !targetMap.containsKey(keys.get(currentIndex))) {
            
    return targetMap.get(keys.get(currentIndex));
  }
  targetMap = (Map<String, Object>)targetMap.get(keys.get(currentIndex));
    	
  return getHierarchyLastItem(keys, targetMap, ++currentIndex);
}

Map<String, Object> responseBody = (Map<String, Object>)JSON.deserializeUntyped(response.getBody());
Object organizationPrimaryName = getHierarchyLastItem(new List<String>{'Linkage','ParentOrganization', 'OrganizationPrimaryName'}, responseBody, 0)
    


**********************
for(String keyInMap : myMap.keySet()) {}
for(sObject object : myMap.values()){}

**********************
Get values of picklist
public static List<Map<String, String>> getPicklistValues(String sobjApiName, String picklistApiName) {
	List<Map<String, String>> pickListValues= new List<Map<String, String>>();

        Schema.SObjectType targetType = Schema.getGlobalDescribe().get(sobjApiName);
        Sobject newSObject = targetType.newSObject();
        Schema.sObjectType sobjectType = newSObject.getSObjectType();
        Schema.DescribeSObjectResult sobjectDescribe = sobjectType.getDescribe();
        Map<String, Schema.SObjectField> fieldsMap = sobjectDescribe.fields.getMap();
        List<Schema.PicklistEntry> picklistEntries = fieldsMap.get(picklistApiName).getDescribe().getPickListValues();

        for (Schema.PicklistEntry picklistEntry : picklistEntries) {
            Map<String, String> singleOption = new Map<String, String>();
            singleOption.put('label', picklistEntry.getLabel());
            singleOption.put('value', picklistEntry.getValue());
            pickListValues.add(singleOption);
        }

        return pickListValues;
}

**********************
//get org url
String url = URL.getSalesforceBaseUrl().toExternalForm();

**********************
//Page reference
//взяти параметир з url
String redirect = ApexPages.currentPage().getParameters().get('redirect');

//запхати параметир в url
PageReference pageRef = new PageReference('/apex/EditQuotePage?newId='+thisQuote.Id);
pageRef.setRedirect(true);
pageRef.getParameters().put('redirect', 'true');

//check if user has access to this field
Schema.sObjectType.Contact.fields.Email.isAccessible()


**********************
Visualforce page
**********************
//коли пишем екстеншин до standart controller
<apex:page standardController="case" extensions="cls_CaseMilestones">
public cls_CaseMilestones(ApexPages.StandardController stdController){}

//test до екстеншина
/-сетаємо нашу сторінку в pagereference
PageReference pageRef = Page.CaseMilestones;
Test.setCurrentPage(pageRef);
ApexPages.currentPage().getParameters().put('id', testCase.id);

/-викликаємо на конструктор
ApexPages.StandardController sc = new ApexPages.StandardController(testCase);                                
cls_CaseMilestones controller = new cls_CaseMilestones(sc);


************************
//взнати які юзери в Queue
Lead lead = [SELECT OwnerId, Owner.Type FROM Lead WHERE Company = 'TechMagic'];
if(lead.Owner.Type == 'Queue'){
    List<GroupMember> gm = [SELECT UserOrGroupId  FROM GroupMember WHERE GroupId = :lead.OwnerId];
    for(GroupMember g : gm){
        System.debug(g.Id.getSObjectType() + '-' + g.UserOrGroupId.getSObjectType());
    }
    List<User> u = [SELECT Name FROM User WHERE Id = :gm[0].UserOrGroupId];
    System.debug(u);
}


*************************
//get fields type
Map<String, Schema.SObjectField> cf = Schema.SObjectType.Account.fields.getMap();
List<Map<String, String>> fieldsTypes = new List<Map<String, String>>();
for(String field : cf.keySet()) {
    Schema.SObjectField f = cf.get(field);
    Schema.DisplayType fieldType = f.getDescribe().getType();
    System.debug(f + ' => ' + field + ' => ' + fieldType);
    Map<String, String> fieldTypeMap = new Map<String, String>{String.valueOf(field) => String.valueOf(fieldType)};
    fieldsTypes.add(fieldTypeMap);
}
System.debug(JSON.serialize(fieldsTypes));

//get fields and fields type from field set API named Heroku_App_Fields sObject Case
List<Schema.FieldSetMember> allFields = Schema.SObjectType.Case.fieldSets.Heroku_App_Fields.getFields();
List<Map<String, String>> fieldsTypes = new List<Map<String, String>>();
for(Schema.FieldSetMember f : allFields){
    String field = String.valueOf(f.getFieldPath()).toLowerCase();
    String fieldType = String.valueOf(f.getType()).toLowerCase();
    Map<String, String> fieldTypeMap = new Map<String, String>{field => fieldType};
    fieldsTypes.add(fieldTypeMap);
    
    System.debug('Name=> ' + field + ' **** Type=> ' + fieldType);
}
System.debug(JSON.serialize(fieldsTypes));

*************************
//Custom settings
String token = ServiceTokens__c.getValues('ProjectServiceToken').Token__c;


*************************
//time difference
Case c = [SELECT CreatedDate, LastModifiedDate  FROM Case LIMIT 1];
//System.debug(DateTime.newInstance(c.CreatedDate));
//System.debug(datetime.now() - c.CreatedDate);
Long now = datetime.now().getTime();
Long created = c.CreatedDate.getTime();
Long modified = c.LastModifiedDate.getTime();

Long milliseconds = now - modified;
Long seconds = milliseconds / 1000;
Long minutes = seconds / 60;
Long hours = minutes / 60;
Long days = hours / 24;

System.debug(days);

*************************
//insert feed to product record
спочатку треба включити feed для даного обєкту
Product2 p = new Product2(Name='Test Product', Quantity_Remaining__c = 5);
insert p;
insert new FeedItem(
    Body=p.Name+' Quantity is down to '+p.Quantity_Remaining__c,
    ParentId = p.Id
);


*************************
sleep, пауза, штучна затримка
Long startingTime = System.now().getTime(); // Num milliseconds since Jan 1 1970
Integer delayInMilliseconds = 1000; // One-second delay
while (System.now().getTime() - startingTime < delayInMilliseconds){
    // Do nothing until desired delay has passed
}

**************************
//Wrapper class
public class ChartHelper{
  public class ChartData {
        public String name {get;set;}
        public Decimal val {get;set;}

        public ChartData(String name, Decimal val){
            this.name = name;
            this.val = val;
        }
  }
}
//виклик в методі з того самого класу (ChartHelper)
ChartData chtItem = new ChartData('str', 5);
//виклик з іншого класу
public class OrderExtension {
  public void fillPieDataAndTotalQuantity(){
    ChartHelper.ChartData chartWrap = new ChartHelper.ChartData('str', 5);
  }
}



*****************************
add picklist to commponent to change value in Community builder or in Lightning App builder
<aura:component implements="forceCommunity:availableForAllPageTypes">
    <aura:attribute name="subject" type="String"/>
    <aura:attribute name="subSubject" type="String"/>
</aura:component>

<design:component label="Community Case Form">
    <design:attribute name="subject" datasource="apex://CommunityFormTiltePicklist" label="Form Title"/>
    <design:attribute name="subSubject" datasource="apex://CommunityFormSubtitlePicklist" label="Form Sub Title"/>
</design:component>

public class CommunityFormSubtitlePicklist extends VisualEditor.DynamicPickList{
	public override VisualEditor.DataRow getDefaultValue(){
		Schema.DescribeFieldResult titleField = Case.Subtitle__c.getDescribe();
		List<Schema.PicklistEntry> titleValues = titleField.getPicklistValues();

		VisualEditor.DataRow defaultValue = new VisualEditor.DataRow(titleValues[0].getLabel(), titleValues[0].getValue());

		return defaultValue;
	}

	public override VisualEditor.DynamicPickListRows getValues() {
		VisualEditor.DynamicPickListRows rows = new VisualEditor.DynamicPickListRows();

		Schema.DescribeFieldResult titleField = Case.Subtitle__c.getDescribe();
		List<Schema.PicklistEntry> titleValues = titleField.getPicklistValues();

		for( Schema.PicklistEntry value : titleValues){
			VisualEditor.DataRow row = new VisualEditor.DataRow(value.getLabel(), value.getValue());
			rows.addRow(row);
		}

		return rows;
	}
}


//send emails
List<String> toEmails = new List<String>();
Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
mail.setToAddresses(toEmails);
mail.setSubject('Community Case creation failed');
mail.setPlainTextBody(e.getMessage());


Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
public static void sendEmailToContact(Contact contact) {
        EmailTemplate emailTemplate = [SELECT Id FROM EmailTemplate WHERE DeveloperName = 'credit_application_form'];
        
        List<String> toAddress = new List<String>();
        toAddress.add(contact.Email);
        
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        mail.setTemplateId(emailTemplate.Id);
        mail.setToAddresses(toAddress);
        mail.setTargetObjectId(contact.Id);
        List<Messaging.SingleEmailMessage> messages = new List<Messaging.SingleEmailMessage>();
        messages.add(mail);
        try {
            Messaging.sendEmail(messages);
        } catch (Exception e) {
            throw e;
        }
    }


*****************
get LIMITS
*****************
Limits.getDMLStatements(); - скільки DML в одній трансакції
Limits.getLimitDMLStatements(); - скільки дозволено DML (150)
test.isRunningTest(); - вертає True or False
Limits.getDMLRows() - скільки вже було DML в трансакції



*****************************
Encrypt/decrypt
//id in url
private static String encryptMemberId(Id memberId) {
	Blob key = EncodingUtil.base64Decode(MembershipTriggerHandler.EAS_KAY);
	Blob data = Blob.valueOf(memberId);
	Blob encrypted = Crypto.encryptWithManagedIV('AES128', key, data);
	String encryptedId =  EncodingUtil.convertToHex(encrypted);

	return encryptedId;
}
private static String decryptMemberId(String encryptedMemberId) {
	Blob key = EncodingUtil.base64Decode(MembershipTriggerHandler.EAS_KAY);
	Blob decryptedFromHex = EncodingUtil.convertFromHex(encryptedMemberId);
	Blob decryptedBlob = Crypto.decryptWithManagedIV('AES128', key, decryptedFromHex);
	String decryptedMemberId = decryptedBlob.toString();

	return decryptedMemberId;
}



***********************
REGEX
s.replace('+', ''); // заміняє плюс на пусто
s.replaceAll('[^a-zA-Z0-9\\s+-]', ''); // залишає літери, цифри, пробіли і дефіси
s.replaceAll('\\s+', '-'); // заміна будь якої кількості пробілів на дефіс
s.replaceAll('-+', '-'); // заміняє будь яку кількість дефісів на один
